name: Deploy windows Vue Mono

on:
    workflow_call:
        inputs:
            slackChannel:
                type: string
                required: false
                default: team-dart-builds
            applicationsMatrix:
                type: string
                required: true
                description: "A JSON string with an 'apps' property eg toJSON({apps: ['meet-app', 'meet-bedrijf-app', 'meet-lab-app']})"
jobs:
    notify:
        runs-on: ubuntu-latest
        strategy:
            matrix: ${{ fromJSON(inputs.applicationsMatrix) }}
        steps:
            -   name: Slack Notification
                uses: rtCamp/action-slack-notify@v2
                env:
                    SLACK_CHANNEL: ${{ inputs.slackChannel }}
                    SLACK_USERNAME: 'BerryBot'
                    SLACK_ICON: 'https://cdn-icons-png.flaticon.com/512/1514/1514967.png'
                    SLACK_MESSAGE: "Environment: ${{ github.event.inputs.environment }}. Application: ${{ matrix.app }}"
                    SLACK_COLOR: '#2196f3'
                    SLACK_TITLE: "An application of ${{ github.event.repository.name }} has started deployment"
                    SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    build:
        needs: notify
        runs-on: ubuntu-latest
        steps:
            -   uses: actions/checkout@v3
            -   name: Checkout ansible
                uses: actions/checkout@v3
                with:
                    repository: bakerware/ansible-playbooks
                    ref: main
                    token: ${{ secrets.ACTION_ACCESS_TOKEN }}
                    path: ansible
            -   uses: actions/setup-node@v3
                with:
                    cache: npm
                    node-version: 16
            -   name: Setup .env files
                # I might be able to pull applications from input..
                run: |
                    read -r -a applications <<< "${{ secrets.MONO_APPLICATIONS }}";
                    for application in "${applications[@]}";
                        do
                            cp apps/${application}/.env.prod.${{ github.event.inputs.environment }} apps/${application}/.env;
                    done;
            -   name: Run build
                run: |
                    npm config set @bakerware:registry  https://npm.pkg.github.com
                    npm config set //npm.pkg.github.com/:_authToken "${{ secrets.ACTION_ACCESS_TOKEN }}"
                    npm ci
                    npm run build
            -   name: Slack Notification
                if: failure()
                uses: rtCamp/action-slack-notify@v2
                env:
                    SLACK_CHANNEL: ${{ inputs.slackChannel }}
                    SLACK_USERNAME: 'BerryBot'
                    SLACK_ICON: 'https://cdn-icons-png.flaticon.com/512/1514/1514967.png'
                    SLACK_MESSAGE: "Environment: ${{ github.event.inputs.environment }}. Application: ${{ matrix.app }}"
                    SLACK_COLOR: '#ff5252'
                    SLACK_TITLE: "An application of ${{ github.event.repository.name }} has started deployment"
                    SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
            -   name: Compress workspace
                run: tar --exclude='node_modules' -zcf /tmp/vivid-env.tar.gz .
            -   name: Upload workspace
                uses: actions/upload-artifact@v3
                with:
                    name: workspace
                    path: /tmp/vivid-env.tar.gz
    deploy:
        needs: [ notify, build ]
        runs-on: ubuntu-latest
        strategy:
            matrix: ${{ fromJSON(inputs.applicationsMatrix) }}
        steps:
            -   name: Download artifacts
                uses: actions/download-artifact@v3
                with:
                    name: workspace
                    path: /tmp
            -   name: Extract workspace
                run: |
                    tar -xf /tmp/vivid-env.tar.gz -C ./
            -   name: Deploy
                uses: rfreij/ansible-playbook-docker-action@master
                with:
                    playbookName: "ansible/vue/playbook.yml"
                    inventoryFile: "apps/${{ matrix.app }}/ansible/inventories/${{ github.event.inputs.environment }}/hosts.yml"
                    keyFileVaultPass: ${{secrets.ANSIBLE_VAULT_PASSWORD}}
                    extraVars: "-e ansible_user=${{secrets.ANSIBLE_USER}} -e ansible_password=${{secrets.ANSIBLE_PASSWORD}}"
            -   name: Slack Notification
                if: success()
                uses: rtCamp/action-slack-notify@v2
                env:
                    SLACK_CHANNEL: ${{ inputs.slackChannel }}
                    SLACK_USERNAME: 'BerryBot'
                    SLACK_ICON: 'https://cdn-icons-png.flaticon.com/512/1514/1514967.png'
                    SLACK_FOOTER: "Please close any Zendesk ticket that was fixed in this deployment"
                    SLACK_MESSAGE: "Environment: ${{ github.event.inputs.environment }}. Application: ${{ matrix.app }}"
                    SLACK_COLOR: 'good'
                    SLACK_TITLE: "An application of ${{ github.event.repository.name }} has been deployment"
                    SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
            -   name: Slack Notification
                if: failure()
                uses: rtCamp/action-slack-notify@v2
                env:
                    SLACK_CHANNEL: ${{ inputs.slackChannel }}
                    SLACK_USERNAME: 'BerryBot'
                    SLACK_ICON: 'https://cdn-icons-png.flaticon.com/512/1514/1514967.png'
                    SLACK_MESSAGE: "Environment: ${{ github.event.inputs.environment }}. Application: ${{ matrix.app }}"
                    SLACK_COLOR: '#ff5252'
                    SLACK_TITLE: "Deployment of an application of ${{ github.event.repository.name }} has failed"
                    SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
